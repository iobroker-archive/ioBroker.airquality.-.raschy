{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["'use strict';\n/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport { getComponents, getMeasurements, getStations } from './lib/api_calls';\n// #import { writeLog } from './lib/filelogger';\nimport { correctHour } from './lib/helper_time';\n// #const fileHandle = { path: './logs/airquality', file: 'logs.txt' };\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass Airquality extends utils.Adapter {\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: 'airquality',\n\t\t\tuseFormatDate: true,\n\t\t});\n\t\tthis.on('ready', this.onReady.bind(this));\n\t\t// this.on('stateChange', this.onStateChange.bind(this));\n\t\t// this.on('objectChange', this.onObjectChange.bind(this));\n\t\t// this.on('message', this.onMessage.bind(this));\n\t\tthis.on('unload', this.onUnload.bind(this));\n\t}\n\tpublic updateInterval: ioBroker.Interval | undefined = undefined;\n\tpublic stationList: Stations = {};\n\tpublic components: Components = {};\n\tpublic summerOffset: number = 0;\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\t// Initialize your adapter here\n\n\t\t// The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n\t\t// this.config:\n\t\tthis.log.info('Latitude: ' + this.latitude);\n\t\tthis.log.info('Longitude: ' + this.longitude);\n\t\tthis.log.info('config stations: ' + this.config.stations);\n\t\t//\n\t\t// -----------------  Timeout variables -----------------\n\t\tconst executionInterval: number = 15; // => minutes\n\t\t//\n\t\tthis.stationList = await getStations();\n\t\tconsole.log(this.stationList[931].city); //> 'Lingen'\n\t\t//\n\t\tthis.components = await getComponents();\n\t\tconsole.log(this.components[6].desc); //> 'Blei im Feinstaub'\n\t\t//\n\t\tif (this.config.stations.length === 0) {\n\t\t\tconsole.log('No Stations');\n\t\t\t// if no station is selected in config\n\t\t\tconst home: Home = await this.getLocation();\n\t\t\tif (home.lat > 0) {\n\t\t\t\tconst nearestStationIdx: number = await this.findNearestStation(home, this.stationList);\n\t\t\t\tconsole.log(`nearestStationIdx: ${nearestStationIdx}`);\n\t\t\t\tawait this.writeStationToConfig(this.stationList[nearestStationIdx].code);\n\t\t\t}\n\t\t\t//\n\t\t} else {\n\t\t\tconsole.log('Start');\n\t\t\tawait this.loop();\n\t\t\tthis.updateInterval = this.setInterval(async () => {\n\t\t\t\tconsole.log(this.config.stations);\n\t\t\t\tawait this.loop();\n\t\t\t\tconsole.log(`Moep: ${this.updateInterval}`);\n\t\t\t}, executionInterval * 60000);\n\t\t}\n\t}\n\n\tasync loop(): Promise<any> {\n\t\tconsole.log('### LOOP ###');\n\t\tconst selectedStations = await this.checkStationInput();\n\t\t//\n\t\ttry {\n\t\t\tfor (const station of selectedStations) {\n\t\t\t\tconst measurement = await getMeasurements(station);\n\t\t\t\tawait this.parseData(measurement);\n\t\t\t\tconsole.log('==========');\n\t\t\t}\n\t\t\tawait this.setState('info.lastUpdate', { val: Date.now(), ack: true });\n\t\t} catch (error: unknown) {\n\t\t\tthis.setState('info.connection', { val: false, ack: true });\n\t\t\tif (error instanceof Error) {\n\t\t\t\tthis.log.error('[loop] Fehler: ' + error.message);\n\t\t\t} else {\n\t\t\t\tthis.log.error('[loop] Unbekannter Fehler: ' + error);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Persist the measurements\n\t * @param {string} station\n\t * @param {string} sensor\n\t * @param {string} description\n\t * @param {number} value\n\t * @param {string} unit\n\t * @param {string} role\n\t */\n\tasync persistData(\n\t\tstation: string,\n\t\tsensor: string,\n\t\tdescription: string,\n\t\tvalue: number | string,\n\t\tunit: string,\n\t\trole: string,\n\t): Promise<void> {\n\t\tconst dp_Sensor = this.removeInvalidCharacters(station) + '.' + this.removeInvalidCharacters(sensor);\n\t\tthis.log.silly(\n\t\t\t`[persistData] Station \"${station}\"  Sensor \"${sensor}\"  Desc \"${description}\" with value: \"${value}\" and unit \"${unit}\" as role \"${role}`,\n\t\t);\n\t\t//\n\t\tif (isNumber(value)) {\n\t\t\t//value = parseFloat(value);\n\t\t\tawait this.setObjectNotExistsAsync(dp_Sensor, {\n\t\t\t\ttype: 'state',\n\t\t\t\tcommon: {\n\t\t\t\t\tname: description,\n\t\t\t\t\ttype: 'number',\n\t\t\t\t\trole: role,\n\t\t\t\t\tunit: unit,\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: false,\n\t\t\t\t},\n\t\t\t\tnative: {},\n\t\t\t});\n\t\t} else {\n\t\t\t// or <string>\n\t\t\tawait this.setObjectNotExistsAsync(dp_Sensor, {\n\t\t\t\ttype: 'state',\n\t\t\t\tcommon: {\n\t\t\t\t\tname: description,\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\trole: role,\n\t\t\t\t\tunit: unit,\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: false,\n\t\t\t\t},\n\t\t\t\tnative: {},\n\t\t\t});\n\t\t}\n\t\t//\n\t\t//console.log('Write:', dp_Sensor);\n\t\tawait this.setState(dp_Sensor, { val: value, ack: true, q: 0x00 });\n\t\t//\n\t\tfunction isNumber(n: any): boolean {\n\t\t\treturn !isNaN(parseFloat(n)) && !isNaN(n - 0);\n\t\t}\n\t}\n\t//\n\t/**\n\t * Retrieves the desired data from the payload and prepares data for storage\n\t * @param {*} payload Object from Response\n\t * @returns\n\t */\n\tasync parseData(payload: any): Promise<any> {\n\t\tthis.log.debug(`[parseData] Payload: ${JSON.stringify(payload)}`);\n\t\t//writeLog(fileHandle, JSON.stringify(payload));\n\t\tif (Object.keys(payload).length === 0) {\n\t\t\tthis.log.warn('No data received');\n\t\t\treturn;\n\t\t}\n\t\t//\n\t\tconst localDate = new Date();\n\t\tconst summerOffset = localDate.getTimezoneOffset() / 60;\n\t\tconsole.log(`LocalDate: Offset ${summerOffset}`);\n\t\t//\n\t\tconst stationId: number = parseInt(Object.keys(payload)[0]);\n\t\tawait this.createObject(\n\t\t\tthis.stationList[stationId].code,\n\t\t\tthis.stationList[stationId].city,\n\t\t\tthis.stationList[stationId].street,\n\t\t);\n\t\t//\n\t\tconst innerObject = payload[stationId];\n\t\tconst dateTimeStart = Object.keys(innerObject)[0];\n\t\tconst dateTimeEnd: string = innerObject[dateTimeStart][0];\n\t\tconst bisTime: string = correctHour(dateTimeEnd, summerOffset * -1 - 1);\n\t\tconsole.log('bisTime: ', bisTime);\n\t\t//\n\t\tlet innerData;\n\t\tlet nArray = 0;\n\t\tfor (const element in innerObject) {\n\t\t\tinnerData = innerObject[element];\n\t\t\tconsole.log('inner: ', innerData);\n\n\t\t\tfor (const element in innerData) {\n\t\t\t\t//console.log('Element: ', element);\n\t\t\t\tif (Array.isArray(innerData[element])) {\n\t\t\t\t\tnArray++;\n\t\t\t\t\tconsole.log(innerData[element]);\n\t\t\t\t\tconst typeMeasurement = innerData[element][0];\n\t\t\t\t\tconsole.log(`typeMeasurement=${typeMeasurement} ==> ${this.components[typeMeasurement].name}`);\n\t\t\t\t\tawait this.persistData(\n\t\t\t\t\t\tthis.stationList[stationId].code,\n\t\t\t\t\t\tthis.components[typeMeasurement].name,\n\t\t\t\t\t\tthis.components[typeMeasurement].desc,\n\t\t\t\t\t\tinnerData[element][1], // Value\n\t\t\t\t\t\tthis.components[typeMeasurement].unit,\n\t\t\t\t\t\t'state',\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (nArray > 0) {\n\t\t\tthis.persistData(\n\t\t\t\tthis.stationList[stationId].code,\n\t\t\t\t'Letzte Messung',\n\t\t\t\t'Zeitspanne der letzten Messung',\n\t\t\t\tbisTime,\n\t\t\t\t'',\n\t\t\t\t'string',\n\t\t\t);\n\t\t\tthis.persistData(\n\t\t\t\tthis.stationList[stationId].code,\n\t\t\t\t'Anzahl Messtypen',\n\t\t\t\t'Zahl der zuletzt gemessenen Typen',\n\t\t\t\tnArray,\n\t\t\t\t'',\n\t\t\t\t'number',\n\t\t\t);\n\t\t}\n\t\tthis.log.debug(`[parseData] Measured values from ${nArray} sensors determined`);\n\t}\n\t//\t########################\n\ttestQueryParameters(): void {\n\t\tconst d = new Date();\n\t\tconsole.log(d);\n\t\tfor (let h: number = 0; h < 24; h++) {\n\t\t\t//const yDate: Date = buildDate(h);\n\t\t\tconsole.log(h, new Date(d.getFullYear(), d.getMonth(), d.getDate(), h, d.getMinutes(), d.getSeconds()));\n\t\t\t//console.log(h, yDate);\n\t\t}\n\t}\n\t//\t########################\n\n\t//\n\tasync checkStationInput(): Promise<any> {\n\t\tconst selectedStations = this.config.stations;\n\t\tconsole.log('Selected Stations: ' + selectedStations);\n\t\tconsole.log(Array.isArray(selectedStations));\n\t\treturn selectedStations;\n\t}\n\t//\n\t/**\n\t * Use the specified coordinates from the configuration\n\t * @returns {object} Koordinates(lat, lon)\n\t */\n\tasync getLocation(): Promise<any> {\n\t\tthis.log.debug('[getLocation] try to use the location from the system configuration');\n\t\tif (this.latitude == undefined || this.latitude == 0 || this.longitude == undefined || this.longitude == 0) {\n\t\t\tthis.log.warn(\n\t\t\t\t'longitude/latitude not set in system-config - please check instance configuration of \"System settings\"',\n\t\t\t);\n\t\t\treturn { lat: -1, lon: -1 };\n\t\t} else {\n\t\t\tthis.log.debug(`[getLocation] using Latitude: ${this.latitude} and Longitude: ${this.longitude}`);\n\t\t\tif (isNaN(this.latitude)) console.log('Latitude Moep');\n\t\t\treturn { lat: this.latitude, lon: this.longitude };\n\t\t}\n\t}\n\t//\n\t/**\n\t * search for the nearest station using coordinates\n\t * @param {object} localHome\n\t * @param {object} coordinates\n\t * @returns {number} stationId\n\t */\n\tasync findNearestStation(localHome: Home, coordinates: Stations): Promise<number> {\n\t\tlet minDistance: number = Number.MAX_VALUE;\n\t\tlet nearestStation: number = 0;\n\t\tthis.log.debug(`[findNearestStation]: Latitude: ${localHome.lat} Longitude: ${localHome.lon}`);\n\t\t//\n\t\tfor (const key of Object.keys(coordinates)) {\n\t\t\t//console.log(`${key}: ${JSON.stringify(coordinates[key as keyof typeof coordinates])}`);\n\t\t\t//console.log(`${key}: ${coordinates[key].lat} # ${coordinates[key].lon}`);\n\t\t\tconst distance = this.getDistanceFromLatLonInKm(\n\t\t\t\tlocalHome.lat,\n\t\t\t\tlocalHome.lon,\n\t\t\t\tparseFloat(coordinates[key].lat),\n\t\t\t\tparseFloat(coordinates[key].lon),\n\t\t\t);\n\t\t\tthis.log.silly(`Distance: ${key} ${distance}`);\n\t\t\t//console.log(`Distance: ${key} ${distance}`);\n\t\t\tif (distance < minDistance) {\n\t\t\t\tminDistance = distance;\n\t\t\t\tnearestStation = parseInt(key);\n\t\t\t}\n\t\t}\n\t\tthis.log.debug(`[findNearestStation]: >>> Station ID: ${nearestStation}`);\n\t\treturn nearestStation;\n\t}\n\t//\n\t/**\n\t * write code of Station in UI-config\n\t * @param {string} localStation code of mesurement station\n\t */\n\tasync writeStationToConfig(localStation: string): Promise<void> {\n\t\t//console.log(`[writeStationToConfig] ${localStation}`);\n\t\tconst _station: Array<string> = [];\n\t\treturn; // only for testing\n\t\tthis.getForeignObject('system.adapter.' + this.namespace, (err, obj) => {\n\t\t\tif (err) {\n\t\t\t\tthis.log.error(`[writeStationToConfig] ${err}`);\n\t\t\t} else {\n\t\t\t\tif (obj) {\n\t\t\t\t\t_station.push(localStation); // must be an array\n\t\t\t\t\tobj.native.stations = _station; // modify object\n\t\t\t\t\tthis.setForeignObject(obj._id, obj, (err) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tthis.log.error(`[writeStationToConfig] Error when writing in config: ${err}`);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.log.debug(`[writeStationToConfig] New Station in config: ${localStation}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\t//\n\t/**\n\t * Create a folder f\u00FCr station\n\t * @param {string} station\n\t * @param {string} description\n\t */\n\tasync createObject(station: string, description: string, location: string): Promise<void> {\n\t\tconst dp_Folder = this.removeInvalidCharacters(station);\n\t\tthis.log.debug(`[createObject] Folder: ${dp_Folder}`);\n\t\tawait this.setObjectNotExists(dp_Folder, {\n\t\t\ttype: 'folder',\n\t\t\tcommon: {\n\t\t\t\tname: 'Measurements from station',\n\t\t\t\tdesc: description + '> ' + location,\n\t\t\t\trole: 'info',\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n\t\tthis.log.debug(`[createObject] Station \"${station}\" City \"${description}\"`);\n\t}\n\t//\n\t//__________________________\n\t// removes illegal characters\n\tremoveInvalidCharacters(inputString: string): string {\n\t\tconst regexPattern = '[^a-zA-Z0-9]+';\n\t\tconst regex = new RegExp(regexPattern, 'gu');\n\t\treturn inputString.replace(regex, '_');\n\t}\n\t//__________________________\n\t// calculates the distance between two coordinates using the Haversine formula\n\tgetDistanceFromLatLonInKm(lat1: number, lon1: number, lat2: number, lon2: number): number {\n\t\tconst R = 6371; // Radius of the earth in kilometres\n\t\tconst dLat = this.deg2rad(lat2 - lat1);\n\t\tconst dLon = this.deg2rad(lon2 - lon1);\n\t\tconst a =\n\t\t\tMath.sin(dLat / 2) * Math.sin(dLat / 2) +\n\t\t\tMath.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n\t\tconst c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\t\tconst d = R * c; // Entfernung in km\n\t\treturn d;\n\t}\n\t//__________________________\n\t// Convert to radians\n\tdeg2rad(deg: number): number {\n\t\treturn deg * (Math.PI / 180);\n\t}\n\t//\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\t// clearTimeout(timeout1);\n\t\t\t// clearTimeout(timeout2);\n\t\t\tif (this.updateInterval) {\n\t\t\t\tthis.clearInterval(this.updateInterval);\n\t\t\t}\n\t\t\tcallback();\n\t\t\t/*eslint no-unused-vars: [\"error\", { \"caughtErrors\": \"none\" }]*/\n\t\t} catch (e) {\n\t\t\tthis.log.debug(`[onUnload] e ${e}`); //eslint no-unused-vars\n\t\t\tcallback();\n\t\t}\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Airquality(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new Airquality())();\n}\n"],
  "mappings": "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",
  "names": ["element", "err"]
}
