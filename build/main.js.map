{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["'use strict';\n/*\n * Created with @iobroker/create-adapter v2.6.5\n\tRENEWED:\t2024-12-02\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\n// Load your modules here, e.g.:\nimport * as utils from '@iobroker/adapter-core';\nimport { getComponents, getMeasurements, getMeasurementsComp, getStations } from './lib/api_calls';\n\nclass Airquality extends utils.Adapter {\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'airquality',\n            useFormatDate: true,\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n    public stationList: Stations = {};\n    public components: Components = {};\n    public numberOfElements: number = 0;\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        // The adapters config (in the instance object everything under the attribute \"native\") is\n        // accessible via this.config:\n        this.log.debug(`Latitude: ${this.latitude}`);\n        this.log.debug(`Longitude: ${this.longitude}`);\n        this.log.debug(`config stations: ${this.config.stations}`);\n        //\n        this.stationList = await getStations();\n        //console.log(this.stationList[931].city); //> 'Lingen'\n        //\n        this.components = await getComponents();\n        //console.log(this.components[6].desc); //> 'Blei im Feinstaub'\n        //\n        if (this.config.stations.length === 0) {\n            this.log.info('[onReady] No stations specified');\n            // if no station is selected in config\n            const home: Home = await this.getLocation();\n            if (home.lat > 0) {\n                const nearestStationIdx: number = await this.findNearestStation(home, this.stationList);\n                this.log.info(`[onReady] nearestStationIdx: ${nearestStationIdx}`);\n                await this.writeStationToConfig(this.stationList[nearestStationIdx].code);\n            }\n        }\n        // start with delay\n        this.log.info('[onReady] may be loop');\n        await this.delay(Math.floor(Math.random() * 5000));\n        const selectedStations = this.config.stations;\n        this.log.info('[onReady] selectedStations');\n        //\n        try {\n            for (const station of selectedStations) {\n                this.log.debug(`[onReady] fetches Data from : ${station}`);\n                await this.parseData(await getMeasurements(station));\n                await this.parseDataSingle(await getMeasurementsComp(station, 2));\n            }\n            //\n            //await this.setState('info.lastUpdate', { val: Date.now(), ack: true });\n            this.setState('info.lastUpdate', { val: Date.now(), ack: true });\n        } catch (error: unknown) {\n            this.setState('info.connection', { val: false, ack: true });\n            if (error instanceof Error) {\n                this.log.error(`[loop] Error: ${error.message}`);\n            } else {\n                this.log.error(`[loop] Unknown error: ${error}`);\n            }\n        } finally {\n            this.log.debug(`[onReady] finished - stopping instance`);\n            this.terminate\n                ? this.terminate('Everything done. Going to terminate till next schedule', 11)\n                : process.exit(0);\n        }\n        // End onReady\n    }\n\n    /**\n     * Persist the measurements\n     *\n     * @param station\n     * @param sensor\n     * @param description\n     * @param value\n     * @param unit\n     * @param role\n     */\n    async persistData(\n        station: string,\n        sensor: string,\n        description: string,\n        value: number | string,\n        unit: string,\n        role: string,\n    ): Promise<void> {\n        const dp_Sensor = `${this.removeInvalidCharacters(station)}.${this.removeInvalidCharacters(sensor)}`;\n        this.log.silly(\n            `[persistData] Station \"${station}\"  Sensor \"${sensor}\"  Desc \"${description}\" with value: \"${value}\" and unit \"${unit}\" as role \"${role}`,\n        );\n        //\n        if (isNumber(value)) {\n            //value = parseFloat(value);\n            await this.setObjectNotExistsAsync(dp_Sensor, {\n                type: 'state',\n                common: {\n                    name: description,\n                    type: 'number',\n                    role: role,\n                    unit: unit,\n                    read: true,\n                    write: false,\n                },\n                native: {},\n            });\n        } else {\n            // or <string>\n            await this.setObjectNotExistsAsync(dp_Sensor, {\n                type: 'state',\n                common: {\n                    name: description,\n                    type: 'string',\n                    role: role,\n                    unit: unit,\n                    read: true,\n                    write: false,\n                },\n                native: {},\n            });\n        }\n        //\n        await this.setState(dp_Sensor, { val: value, ack: true, q: 0x00 });\n        //\n        function isNumber(n: any): boolean {\n            return !isNaN(parseFloat(n)) && !isNaN(n - 0);\n        }\n    }\n\n    /**\n     * Retrieves the desired data from the payload and prepares data for storage\n     *\n     * @param {} payload Object from Response\n     * @returns\n     */\n    async parseDataSingle(payload: any): Promise<any> {\n        this.log.debug(`[parseDataSingle] Payload: ${JSON.stringify(payload)}`);\n        if (Object.keys(payload).length === 0) {\n            //this.log.warn('No data received');\n            return;\n        }\n        //\n        const localDate = new Date();\n        const summerOffset = localDate.getTimezoneOffset() / 60;\n        //\n        const stationId: number = parseInt(Object.keys(payload)[0]);\n        await this.createObject(\n            this.stationList[stationId].code,\n            this.stationList[stationId].city,\n            this.stationList[stationId].street,\n        );\n        //\n        const innerObject = payload[stationId];\n        const dateTimeStart = Object.keys(innerObject)[0];\n        const dateTimeEnd: string = innerObject[dateTimeStart][3];\n        console.log(`dateTimeEnd: ${dateTimeEnd}`);\n        const timeEndAdjusted: string = this.correctHour(dateTimeEnd, summerOffset * -1 - 1);\n        //\n        const innerData = innerObject[dateTimeStart];\n        //\n        console.log(innerData);\n        const typeMeasurement = innerData[0];\n        await this.persistData(\n            this.stationList[stationId].code,\n            this.components[typeMeasurement].name,\n            this.components[typeMeasurement].desc,\n            innerData[2], // Value\n            this.components[typeMeasurement].unit,\n            'state',\n        );\n        this.numberOfElements++;\n        if (this.numberOfElements > 0) {\n            this.persistData(\n                this.stationList[stationId].code,\n                'Letzte Messung',\n                'Zeitspanne der letzten Messung',\n                timeEndAdjusted,\n                '',\n                'string',\n            );\n            this.persistData(\n                this.stationList[stationId].code,\n                'Anzahl Messtypen',\n                'Zahl der zuletzt gemessenen Typen',\n                this.numberOfElements,\n                '',\n                'number',\n            );\n        }\n        //}\n        this.log.debug(`[parseDataComp] Measured values from ${this.numberOfElements} sensors determined`);\n    }\n\n    //\n    /**\n     * Retrieves the desired data from the payload and prepares data for storage\n     *\n     * @param {} payload Object from Response\n     * @returns\n     */\n    async parseData(payload: any): Promise<any> {\n        this.log.debug(`[parseData] Payload: ${JSON.stringify(payload)}`);\n        if (Object.keys(payload).length === 0) {\n            this.log.warn('No data received');\n            return;\n        }\n        //\n        const localDate = new Date();\n        const summerOffset = localDate.getTimezoneOffset() / 60;\n        //\n        const stationId: number = parseInt(Object.keys(payload)[0]);\n        await this.createObject(\n            this.stationList[stationId].code,\n            this.stationList[stationId].city,\n            this.stationList[stationId].street,\n        );\n        //\n        const innerObject = payload[stationId];\n        const dateTimeStart = Object.keys(innerObject)[0];\n        const dateTimeEnd: string = innerObject[dateTimeStart][0];\n        const timeEndAdjusted: string = this.correctHour(dateTimeEnd, summerOffset * -1 - 1);\n        //\n        let innerData;\n        this.numberOfElements = 0;\n        for (const element in innerObject) {\n            innerData = innerObject[element];\n\n            for (const element in innerData) {\n                if (Array.isArray(innerData[element])) {\n                    this.numberOfElements++;\n                    const typeMeasurement = innerData[element][0];\n                    await this.persistData(\n                        this.stationList[stationId].code,\n                        this.components[typeMeasurement].name,\n                        this.components[typeMeasurement].desc,\n                        innerData[element][1], // Value\n                        this.components[typeMeasurement].unit,\n                        'state',\n                    );\n                }\n            }\n        }\n        if (this.numberOfElements > 0) {\n            this.persistData(\n                this.stationList[stationId].code,\n                'Letzte Messung',\n                'Zeitspanne der letzten Messung',\n                timeEndAdjusted,\n                '',\n                'string',\n            );\n            this.persistData(\n                this.stationList[stationId].code,\n                'Anzahl Messtypen',\n                'Zahl der zuletzt gemessenen Typen',\n                this.numberOfElements,\n                '',\n                'number',\n            );\n        }\n        this.log.debug(`[parseData] Measured values from ${this.numberOfElements} sensors determined`);\n    }\n    //\n    /**\n     * Checks if station in config available\n     *\n     * @returns selectedStations\n     */\n    async checkStationInput(): Promise<any> {\n        const selectedStations = this.config.stations;\n        console.log(`Selected Stations: ${selectedStations}`);\n        console.log(Array.isArray(selectedStations));\n        return selectedStations;\n    }\n    //\n    /**\n     * Use the specified coordinates from the configuration\n     *\n     * @returns Koordinates(lat, lon)\n     */\n    async getLocation(): Promise<any> {\n        this.log.debug('[getLocation] try to use the location from the system configuration');\n        if (this.latitude == undefined || this.latitude == 0 || this.longitude == undefined || this.longitude == 0) {\n            this.log.warn(\n                'longitude/latitude not set in system-config - please check instance configuration of \"System settings\"',\n            );\n            return { lat: -1, lon: -1 };\n        }\n        this.log.debug(`[getLocation] using Latitude: ${this.latitude} and Longitude: ${this.longitude}`);\n        return { lat: this.latitude, lon: this.longitude };\n    }\n    //\n    /**\n     * search for the nearest station using coordinates\n     *\n     * @param localHome\n     * @param coordinates\n     * @returns stationId\n     */\n    async findNearestStation(localHome: Home, coordinates: Stations): Promise<number> {\n        let minDistance: number = Number.MAX_VALUE;\n        let nearestStation = 0;\n        this.log.debug(`[findNearestStation]: Latitude: ${localHome.lat} Longitude: ${localHome.lon}`);\n        //\n        for (const key of Object.keys(coordinates)) {\n            const distance = this.getDistanceFromLatLonInKm(\n                localHome.lat,\n                localHome.lon,\n                parseFloat(coordinates[key].lat),\n                parseFloat(coordinates[key].lon),\n            );\n            this.log.silly(`Distance: ${key} ${distance}`);\n            if (distance < minDistance) {\n                minDistance = distance;\n                nearestStation = parseInt(key);\n            }\n        }\n        this.log.debug(`[findNearestStation]: >>> Station ID: ${nearestStation}`);\n        return nearestStation;\n    }\n    //\n    /**\n     * write code of Station in UI-config\n     *\n     * @param localStation code of mesurement station\n     */\n    async writeStationToConfig(localStation: string): Promise<void> {\n        const _station: Array<string> = [];\n        this.getForeignObject(`system.adapter.${this.namespace}`, (err, obj) => {\n            if (err) {\n                this.log.error(`[writeStationToConfig] ${err}`);\n            } else {\n                if (obj) {\n                    _station.push(localStation); // must be an array\n                    obj.native.stations = _station; // modify object\n                    this.setForeignObject(obj._id, obj, err => {\n                        if (err) {\n                            this.log.error(`[writeStationToConfig] Error when writing in config: ${err}`);\n                        } else {\n                            this.log.debug(`[writeStationToConfig] New Station in config: ${localStation}`);\n                        }\n                    });\n                }\n            }\n        });\n    }\n    //\n    /**\n     * Create a folder f\u00FCr station\n     *\n     * @param station\n     * @param description\n     * @param location\n     */\n    async createObject(station: string, description: string, location: string): Promise<void> {\n        const dp_Folder = this.removeInvalidCharacters(station);\n        if (await this.objectExists(dp_Folder)) {\n            return;\n        }\n        //\n        await this.setObjectNotExists(dp_Folder, {\n            type: 'folder',\n            common: {\n                name: {\n                    en: 'Measurements from station',\n                    de: 'Messungen von Station',\n                    ru: '\u0418\u0437\u043C\u0435\u0440\u0435\u043D\u0438\u044F \u043D\u0430 \u0441\u0442\u0430\u043D\u0446\u0438\u0438',\n                    pt: 'Medi\u00E7\u00F5es da esta\u00E7\u00E3o',\n                    nl: 'Metingen vanaf het station',\n                    fr: 'Mesures de la station',\n                    it: 'Misure dalla stazione',\n                    es: 'Medidas desde la estaci\u00F3n',\n                    pl: 'Pomiary ze stacji',\n                    uk: '\u0412\u0438\u043C\u0456\u0440\u044E\u0432\u0430\u043D\u043D\u044F \u0437 \u0441\u0442\u0430\u043D\u0446\u0456\u0457',\n                    'zh-cn': '\u4ECE\u8F66\u7AD9\u6D4B\u91CF',\n                },\n                desc: `${description}> ${location}`,\n                role: 'info',\n            },\n            native: {},\n        });\n        this.log.debug(`[createObject] Station \"${station}\" City \"${description}\"`);\n    }\n\n    /**\n     * calculates the distance between two coordinates using the Haversine formula\n     *\n     * @param lat1 Latitude of the place of residence\n     * @param lon1 Longitude of the place of residence\n     * @param lat2 Latitude of the station\n     * @param lon2 Longitude of the station\n     * @returns Distance to the station\n     */\n    getDistanceFromLatLonInKm(lat1: number, lon1: number, lat2: number, lon2: number): number {\n        const R = 6371; // Radius of the earth in kilometres\n        const dLat = deg2rad(lat2 - lat1);\n        const dLon = deg2rad(lon2 - lon1);\n        const a =\n            Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n            Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        const d = R * c; // Distance in km\n        return d;\n        // Convert to radians\n        function deg2rad(deg: number): number {\n            return deg * (Math.PI / 180);\n        }\n    }\n\n    /**\n     * removes illegal characters\n     *\n     * @param inputString Designated name for an object/data point\n     * @returns Cleaned name for an object/data point\n     */\n    removeInvalidCharacters(inputString: string): string {\n        const regexPattern = '[^a-zA-Z0-9]+';\n        const regex = new RegExp(regexPattern, 'gu');\n        return inputString.replace(regex, '_');\n    }\n\n    /**\n     * correct datestring from datestring by adding x hours\n     *\n     * @param s\n     * @param offset\n     * @returns\n     */\n    correctHour(s: string, offset: number): string {\n        const dateString = s.split(' ')[0].split('-');\n        const sDate = `${dateString[2]}.${dateString[1]}.${dateString[0]}`;\n        //\n        const timeString = s.split(' ')[1].split(':');\n        const hour = parseInt(timeString[0]) + offset; //Korrektur\n        const sHour = hour.toString().padStart(2, '0');\n        const sTime = `${sHour}:${timeString[1]}`;\n        return `${sDate} ${sTime}`;\n    }\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     *\n     * @param callback\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            callback();\n        } catch (e) {\n            this.log.debug(`[onUnload] e ${e}`); //eslint no-unused-vars\n            callback();\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Airquality(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Airquality())();\n}\n"],
  "mappings": "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",
  "names": ["element", "err"]
}
