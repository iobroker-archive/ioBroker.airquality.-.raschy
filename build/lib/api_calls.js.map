{
  "version": 3,
  "sources": ["../../src/lib/api_calls.ts"],
  "sourcesContent": ["'use strict';\n\nconst baseUrl = 'https://umweltbundesamt.api.proxy.bund.dev/api/air_data/v3/';\n\n/**\n *\n * @returns Stations with airquality\n */\nexport async function getStations(): Promise<Stations> {\n\t//url_Stations: 'https://umweltbundesamt.api.proxy.bund.dev/api/air_data/v3/stations/json?lang=de';\n\t//const url: string = baseUrl + 'stations/json?lang=de';\n\tconst urlStation: string = prepareQueryParameters('');\n\tconst url = [baseUrl, 'stations/json?use=airquality&lang', urlStation].join('');\n\tconst _stations: Stations = {};\n\treturn fetch(url, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\taccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t'User-Agent':\n\t\t\t\t'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36',\n\t\t},\n\t}).then(async response => {\n\t\tif (!response.ok) {\n\t\t\tthrow new Error('[getStations] failed to retrieve data');\n\t\t}\n\t\tconst data: any = await response.json();\n\t\tfor (const key in data.data) {\n\t\t\tconst stationId: number = data.data[key][0];\n\t\t\t//\n\t\t\t_stations[stationId] = {\n\t\t\t\tid: data.data[key][0],\n\t\t\t\tcode: data.data[key][1],\n\t\t\t\tcity: data.data[key][3],\n\t\t\t\tnetwork: data.data[key][12],\n\t\t\t\tstreet: data.data[key][17],\n\t\t\t\tnumber: data.data[key][18],\n\t\t\t\tzipcode: data.data[key][19],\n\t\t\t\tlon: data.data[key][7],\n\t\t\t\tlat: data.data[key][8],\n\t\t\t\t//\n\t\t\t};\n\t\t}\n\t\treturn _stations;\n\t});\n}\n\n/**\n *\n * @returns Components\n */\nexport async function getComponents(): Promise<Components> {\n\t//url_Components: 'https://umweltbundesamt.api.proxy.bund.dev/api/air_data/v3/components/json?lang=de&index=id';\n\tconst url = `${baseUrl}components/json?lang=de&index=id`;\n\tconst _components: Components = {};\n\treturn fetch(url, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\taccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t'User-Agent':\n\t\t\t\t'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36',\n\t\t},\n\t}).then(async response => {\n\t\tif (!response.ok) {\n\t\t\tthrow new Error('[getComponents] failed to retrieve data');\n\t\t}\n\t\tconst data: any = await response.json();\n\t\tfor (const key in data) {\n\t\t\tif (!isNaN(parseInt(key))) {\n\t\t\t\t// Measurement types from the numerical lists\n\t\t\t\t_components[key] = { name: data[key][1], unit: data[key][3], desc: data[key][4] };\n\t\t\t}\n\t\t}\n\t\treturn _components;\n\t});\n}\n\n/**\n *\n * @param stationCode alphanumeric Code\n * @returns Measurements\n */\nexport async function getMeasurements(stationCode: string): Promise<any> {\n\t//url_Measurements: 'https://umweltbundesamt.api.proxy.bund.dev/api/air_data/v3/airquality/json?date_from=2024-09-11&time_from=14&date_to=2024-09-11&time_to=14&station=DENW430&lang=de'\n\tconst urlSpec = 'airquality/json?';\n\tconst urlStation: string = prepareQueryParameters(stationCode);\n\tconst url = [baseUrl, urlSpec, urlStation].join('');\n\tlet _measurements: any = {};\n\treturn fetch(url, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\taccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t'User-Agent':\n\t\t\t\t'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36',\n\t\t},\n\t}).then(async response => {\n\t\tif (!response.ok) {\n\t\t\tthrow new Error('[getMeasurements] failed to retrieve data');\n\t\t}\n\t\tconst data: any = await response.json();\n\t\t_measurements = data.data;\n\t\treturn _measurements;\n\t});\n}\n\n/**\n *\n * @param stationCode alphanumeric Code\n * @param component numeric Value\n * @returns Measurements\n */\nexport async function getMeasurementsComp(stationCode: string, component: number): Promise<any> {\n\t//https://www.umweltbundesamt.de/api/air_data/v3/measures/json?date_from=2024-11-29&date_to=2024-11-29&time_from=7&time_to=8&station=DEHE018&component=2\n\tconst urlSpec = 'measures/json?';\n\tconst urlStation: string = prepareQueryParameters(stationCode);\n\tconst url = [baseUrl, urlSpec, urlStation, '&component=', component].join('');\n\tlet _measurements: any = {};\n\treturn fetch(url, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\taccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t\t'User-Agent':\n\t\t\t\t'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36',\n\t\t},\n\t}).then(async response => {\n\t\tif (!response.ok) {\n\t\t\tthrow new Error('[getMeasurements] failed to retrieve data');\n\t\t}\n\t\tconst data: any = await response.json();\n\t\t_measurements = data.data;\n\t\treturn _measurements;\n\t});\n}\n\n/**\n *\n * @param stationCode alphanumeric Code\n * @returns preparedQuery\n */\nfunction prepareQueryParameters(stationCode: string): string {\n\tconst parameters = [];\n\tconst workDate = getDateUTC();\n\tconst _hour = workDate.getHours();\n\tconst _hourFrom = _hour < 1 ? 24 : _hour;\n\t//const _hourFrom1 = _hourFrom - 1;\n\t//const _hourTo = _hourFrom + 1;\n\t//\n\tconst dateFrom = `date_from=${formatDate(workDate)}`;\n\tparameters.push(dateFrom);\n\t//\n\tconst timeFrom = `time_from=${String(_hourFrom)}`;\n\tparameters.push(timeFrom);\n\t//\n\tconst dateTo = `date_to=${formatDate(workDate)}`;\n\tparameters.push(dateTo);\n\t//\n\tconst timeTo = `time_to=${String(_hourFrom)}`; //_hourTo\n\tparameters.push(timeTo);\n\t//\n\tif (stationCode != '') {\n\t\tparameters.push(`station=${stationCode}`);\n\t\tparameters.push('lang=de');\n\t}\n\t//\n\tconst preparedQueryParameter: string = parameters.join('&');\n\t//console.log(`Parameter: ${preparedQueryParameter}`);\n\n\treturn preparedQueryParameter;\n}\n\nfunction getDateUTC(): Date {\n\tconst d = new Date();\n\treturn new Date(\n\t\td.getUTCFullYear(),\n\t\td.getUTCMonth(),\n\t\td.getUTCDate(),\n\t\td.getUTCHours(),\n\t\td.getUTCMinutes(),\n\t\td.getUTCSeconds(),\n\t);\n}\n\nfunction formatDate(d: Date): string {\n\tconst year = d.getFullYear();\n\tconst month = (d.getMonth() + 1).toString().padStart(2, '0');\n\tconst day = d.getDate().toString().padStart(2, '0');\n\treturn `${year}-${month}-${day}`;\n}\n"],
  "mappings": "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",
  "names": []
}
