{
  "version": 3,
  "sources": ["../../src/lib/api_calls.ts"],
  "sourcesContent": ["'use strict';\n\nconst baseUrl = 'https://umweltbundesamt.api.proxy.bund.dev/api/air_data/v3/';\n// \t  baseUrl = 'https://www.umweltbundesamt.de/api/air_data/v3/';\n\n/**\n *\n * @returns Stations with airquality\n */\nexport async function getStations(): Promise<Stations> {\n\tconst stations: Stations = {};\n\ttry {\n\t\tconst url = `${baseUrl}stations/json?lang=de`;\n\n\t\tconst response = await fetch(url, {\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\taccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'User-Agent':\n\t\t\t\t\t'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36',\n\t\t\t},\n\t\t});\n\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`[getStations] HTTP-Fehler: ${response.status}`);\n\t\t}\n\n\t\tconst raw = (await response.json()) as ApiResponseStations;\n\t\t//con_sole.log('[getStations] Count:', raw.count);\n\t\t//raw.count = 0; // Setze count auf 0, um leere Antwort zu simulieren\n\n\t\t// \u00DCberpr\u00FCfe, ob die Antwortstruktur g\u00FCltig ist\n\t\tif (!raw || typeof raw !== 'object' || !raw.data || typeof raw.data !== 'object' || raw.count < 1) {\n\t\t\tthrow new Error('[getStations] Invalid or empty response structure from the server');\n\t\t}\n\n\t\t// Iteriere \u00FCber die Stationseintr\u00E4ge\n\t\tfor (const key in raw.data) {\n\t\t\tconst entry = raw.data[key];\n\t\t\tif (!isValidStationEntry(entry)) {\n\t\t\t\tconsole.warn(`[getStations] Invalid entry for key \"${key}\":`, entry);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst id = entry[0];\n\t\t\tstations[id] = {\n\t\t\t\tid,\n\t\t\t\tcode: entry[1],\n\t\t\t\tcity: entry[3],\n\t\t\t\tlon: entry[7],\n\t\t\t\tlat: entry[8],\n\t\t\t\tnetwork: entry[12],\n\t\t\t\tstreet: entry[17],\n\t\t\t\tnumber: entry[18],\n\t\t\t\tzipcode: entry[19],\n\t\t\t};\n\t\t}\n\t\t// Wenn keine g\u00FCltigen Stationen gefunden wurden \u2192 Fehler!\n\t\tif (Object.keys(stations).length === 0) {\n\t\t\tthrow new Error('No valid stations found');\n\t\t}\n\t\treturn stations;\n\t} catch (error) {\n\t\tconsole.error('Error when calling up station data: ', error);\n\t\tthrow error;\n\t}\n\n\t// only these fields of the stations are of interest\n\tfunction isValidStationEntry(entry: any): entry is string[] {\n\t\tif (!Array.isArray(entry) || entry.length < 20) {\n\t\t\treturn false;\n\t\t}\n\t\tconst expectedStrings = [0, 1, 3, 7, 8, 12, 17, 18, 19];\n\t\treturn expectedStrings.every(index => typeof entry[index] === 'string');\n\t}\n}\n/**\n *\n * @returns Components\n */\nexport async function getComponents(): Promise<Components> {\n\tconst url = `${baseUrl}components/json?lang=de`;\n\n\ttry {\n\t\tconst response = await fetch(url, {\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\taccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t});\n\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`[getComponents] HTTP Error: ${response.status}`);\n\t\t}\n\n\t\tconst raw = (await response.json()) as Record<string, unknown>;\n\n\t\tif (!raw || typeof raw !== 'object') {\n\t\t\tthrow new Error('[getComponents] Unexpected response format');\n\t\t}\n\n\t\tconst components: Components = {};\n\n\t\tfor (const key of Object.keys(raw)) {\n\t\t\t// skip Metadata like \"count\" and \"indices\"\n\t\t\tif (key === 'count' || key === 'indices') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst entry = raw[key];\n\t\t\t//con_sole.log('[getComponents] Entry ', entry);\n\n\t\t\tif (Array.isArray(entry) && entry.length >= 5) {\n\t\t\t\tconst [id, code, symbol, unit, desc] = entry;\n\n\t\t\t\tcomponents[id] = {\n\t\t\t\t\tid,\n\t\t\t\t\tcode,\n\t\t\t\t\tsymbol,\n\t\t\t\t\tunit,\n\t\t\t\t\tdesc,\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconsole.warn(`[getComponents] Invalid entry for key \"${key}\":`, entry);\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(components).length === 0) {\n\t\t\tthrow new Error('No valid components found');\n\t\t}\n\n\t\treturn components;\n\t} catch (error) {\n\t\tconsole.error('Error when calling up the components:', error);\n\t\tthrow error;\n\t}\n}\n\n/**\n *\n * @param stationCode alphanumeric Code\n * @returns Measurements\n */\nexport async function getMeasurements(stationCode: string): Promise<AirQualityResult> {\n\ttry {\n\t\tconst urlSpec = 'airquality/json?';\n\t\tconst urlStation: string = prepareQueryParameters(stationCode);\n\t\tconst url = [baseUrl, urlSpec, urlStation].join('');\n\t\t//\n\t\tconst response = await fetch(url, {\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\taccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'User-Agent':\n\t\t\t\t\t'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36',\n\t\t\t},\n\t\t});\n\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`[getMeasurements] HTTP-Fehler: ${response.status}`);\n\t\t}\n\t\t//\n\t\tconst measuresResponse: AirDataApiResponse<AirQualityData> = await response.json();\n\t\t//\n\t\tif (\n\t\t\t!measuresResponse ||\n\t\t\ttypeof measuresResponse !== 'object' ||\n\t\t\t!measuresResponse.data ||\n\t\t\ttypeof measuresResponse.data !== 'object'\n\t\t) {\n\t\t\tthrow new Error('Invalid or empty response');\n\t\t}\n\t\t//\n\t\t//con_sole.log('[#getMeasurements] Request:', measuresResponse.request);\n\t\t//con_sole.log('[#getMeasurements] Indices:', measuresResponse.indices);\n\t\t//con_sole.log('[#getMeasurements] Count:', measuresResponse.count);\n\t\t//con_sole.log('[#getMeasurements##] data:', measuresResponse.data);\n\t\t//\n\t\t// Iteriere \u00FCber die Messwerte\n\t\tfor (const stationId of Object.keys(measuresResponse.data)) {\n\t\t\tconst airQualityData = measuresResponse.data[stationId];\n\t\t\t//con_sole.log('[#getMeasurements] airQualityData: ', airQualityData);\n\t\t\t//con_sole.log(`[#getMeasurements] Verarbeite Station: ${stationId}`);\n\n\t\t\tif (typeof airQualityData !== 'object' || !airQualityData) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Wenn keine Daten empfangen wurden, leeres Objekt\n\t\t\tif (measuresResponse.count < 1) {\n\t\t\t\tconsole.log('[#getMeasurements] NoData, empty');\n\t\t\t\treturn { success: false };\n\t\t\t}\n\t\t\t//\n\t\t\tfor (const datetime of Object.keys(airQualityData)) {\n\t\t\t\tconst entry = airQualityData[datetime];\n\t\t\t\t//con_sole.log('[#getMeasurements] Entry ', JSON.stringify(entry));\n\t\t\t\t//con_sole.log(`[#getMeasurements] Verarbeite Messwert f\u00FCr ${stationId} @ ${datetime}`);\n\n\t\t\t\tif (!Array.isArray(entry) || entry.length < 4) {\n\t\t\t\t\tconsole.warn(`[getMeasurements] Invalid entry for ${stationId} @ ${datetime}`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst [endTime, , , ...componentArrays] = entry;\n\t\t\t\t//con_sole.log('[#getMeasurements] EndTime ', endTime); //Date of measure end  in CET - string\n\t\t\t\t//con_sole.log('[#getMeasurements] Array ', componentArrays);\n\n\t\t\t\tconst result: AirQualityResult = {\n\t\t\t\t\tsuccess: true,\n\t\t\t\t\tstationId,\n\t\t\t\t\tmeasurementTime: endTime,\n\t\t\t\t\tmeasurementValues: componentArrays,\n\t\t\t\t};\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn { success: false };\n\t} catch (error) {\n\t\tconsole.error('Error when calling up the measured values:', error);\n\t\tthrow error;\n\t}\n}\n\n/**\n *\n * @param stationCode alphanumeric Code\n * @param component number\n * @returns Measurements\n */\nexport async function getMeasurementsComp(stationCode: string, component: number): Promise<AirQualityResult> {\n\ttry {\n\t\tconst urlSpec = 'measures/json?';\n\t\tconst urlStation: string = prepareQueryParameters(stationCode);\n\t\tconst url = [baseUrl, urlSpec, urlStation, '&component=', component, '&scope=4'].join('');\n\t\t// scope=2 ==>  \"Ein-Stunden-Mittelwert\"; scope=4 ==> \"Acht-Stunden-Mittelwert\"\n\t\t//\n\t\tconst response = await fetch(url, {\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\taccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'User-Agent':\n\t\t\t\t\t'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36',\n\t\t\t},\n\t\t});\n\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`[getMeasurementsComp] HTTP-Fehler: ${response.status}`);\n\t\t}\n\n\t\tconst measuresResponse: AirDataApiResponse<AirQualityData> = await response.json();\n\t\tif (\n\t\t\t!measuresResponse ||\n\t\t\ttypeof measuresResponse !== 'object' ||\n\t\t\t!measuresResponse.data ||\n\t\t\ttypeof measuresResponse.data !== 'object'\n\t\t) {\n\t\t\tthrow new Error('Invalid or empty response');\n\t\t}\n\t\t// Iteriere \u00FCber die Messwerte\n\t\tfor (const stationId of Object.keys(measuresResponse.data)) {\n\t\t\tconst airQualityData = measuresResponse.data[stationId];\n\n\t\t\tif (typeof airQualityData !== 'object' || !airQualityData) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Wenn keine Daten empfangen wurden, leeres Objekt\n\t\t\tfor (const datetime of Object.keys(airQualityData)) {\n\t\t\t\tconst entry = airQualityData[datetime];\n\n\t\t\t\tif (!Array.isArray(entry) || entry.length < 4) {\n\t\t\t\t\tconsole.warn(`[#getMeasurementsComp] Ung\u00FCltiger Eintrag f\u00FCr ${stationId} @ ${datetime}`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t/*\n\t\t\t\t[\t\"0: Id of component - integer\",\n          \t\t \t\"1: Id of scope - integer\",\n          \t\t \t\"2: Value - number\",\n          \t\t \t\"3: Date of measure end - string\",\n          \t\t\t\"4: Index - string|null\"\t]\n\t\t  \t\t*/\n\t\t\t\tconst [componentId, scopeId, value, endTime, index] = entry;\n\t\t\t\tconst componentArray: AirQualityFromComponent = [Number(componentId), value, scopeId, String(index)];\n\n\t\t\t\tconst result: AirQualityResult = {\n\t\t\t\t\tsuccess: true,\n\t\t\t\t\tstationId,\n\t\t\t\t\tmeasurementTime: String(endTime),\n\t\t\t\t\tmeasurementValues: [componentArray],\n\t\t\t\t};\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn { success: false };\n\t} catch (error) {\n\t\tconsole.error('Error when calling up the measured values: ', error);\n\t\tthrow error;\n\t}\n}\n\n/**\n *\n * @param stationCode alphanumeric Code\n * @returns preparedQuery\n */\nfunction prepareQueryParameters(stationCode: string): string {\n\tconst parameters = [];\n\tconst workDate = getDateUTC();\n\tconst _hour = workDate.getHours();\n\tconst _hourFrom = _hour < 1 ? 24 : _hour;\n\t//\n\tconst dateFrom = `date_from=${formatDate(workDate)}`;\n\tparameters.push(dateFrom);\n\t//\n\tconst timeFrom = `time_from=${String(_hourFrom)}`;\n\tparameters.push(timeFrom);\n\t//\n\tconst dateTo = `date_to=${formatDate(workDate)}`;\n\tparameters.push(dateTo);\n\t//\n\tconst timeTo = `time_to=${String(_hourFrom)}`; //_hourTo\n\tparameters.push(timeTo);\n\t//\n\tif (stationCode != '') {\n\t\tparameters.push(`station=${stationCode}`);\n\t\t//parameters.push('lang=de');\n\t}\n\t//\n\tconst preparedQueryParameter: string = parameters.join('&');\n\t//con_sole.log(`Parameter: ${preparedQueryParameter}`);\n\n\treturn preparedQueryParameter;\n}\n\nfunction getDateUTC(): Date {\n\tconst d = new Date();\n\treturn new Date(\n\t\td.getUTCFullYear(),\n\t\td.getUTCMonth(),\n\t\td.getUTCDate(),\n\t\td.getUTCHours(),\n\t\td.getUTCMinutes(),\n\t\td.getUTCSeconds(),\n\t);\n}\n\nfunction formatDate(d: Date): string {\n\tconst year = d.getFullYear();\n\tconst month = (d.getMonth() + 1).toString().padStart(2, '0');\n\tconst day = d.getDate().toString().padStart(2, '0');\n\treturn `${year}-${month}-${day}`;\n}\n"],
  "mappings": "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",
  "names": []
}
