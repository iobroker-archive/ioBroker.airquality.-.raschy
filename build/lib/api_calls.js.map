{
  "version": 3,
  "sources": ["../../src/lib/api_calls.ts"],
  "sourcesContent": ["'use strict';\n\nconst baseUrl = 'https://umweltbundesamt.api.proxy.bund.dev/api/air_data/v3/';\n\n/**\n *\n * @returns Stations with airquality\n */\nexport async function getStations(): Promise<Stations> {\n    //url_Stations: 'https://umweltbundesamt.api.proxy.bund.dev/api/air_data/v3/stations/json?lang=de';\n    //const url: string = baseUrl + 'stations/json?lang=de';\n    const urlStation: string = prepareQueryParameters('');\n    const url = [baseUrl, 'stations/json?use=airquality&lang', urlStation].join('');\n    const _stations: Stations = {};\n    return fetch(url, {\n        method: 'GET',\n        headers: {\n            accept: 'application/json',\n            'Content-Type': 'application/json',\n            'User-Agent':\n                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36',\n        },\n    }).then(async response => {\n        if (!response.ok) {\n            throw new Error('[getStations] failed to retrieve data');\n        }\n        const data: any = await response.json();\n        for (const key in data.data) {\n            const stationId: number = data.data[key][0];\n            //\n            _stations[stationId] = {\n                id: data.data[key][0],\n                code: data.data[key][1],\n                city: data.data[key][3],\n                network: data.data[key][12],\n                street: data.data[key][17],\n                number: data.data[key][18],\n                zipcode: data.data[key][19],\n                lon: data.data[key][7],\n                lat: data.data[key][8],\n                //\n            };\n        }\n        return _stations;\n    });\n}\n\n/**\n *\n * @returns Components\n */\nexport async function getComponents(): Promise<Components> {\n    //url_Components: 'https://umweltbundesamt.api.proxy.bund.dev/api/air_data/v3/components/json?lang=de&index=id';\n    const url = `${baseUrl}components/json?lang=de&index=id`;\n    const _components: Components = {};\n    return fetch(url, {\n        method: 'GET',\n        headers: {\n            accept: 'application/json',\n            'Content-Type': 'application/json',\n            'User-Agent':\n                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36',\n        },\n    }).then(async response => {\n        if (!response.ok) {\n            throw new Error('[getComponents] failed to retrieve data');\n        }\n        const data: any = await response.json();\n        for (const key in data) {\n            if (!isNaN(parseInt(key))) {\n                // Measurement types from the numerical lists\n                _components[key] = { name: data[key][1], unit: data[key][3], desc: data[key][4] };\n            }\n        }\n        return _components;\n    });\n}\n\n/**\n *\n * @param stationCode alphanumeric Code\n * @returns Measurements\n */\nexport async function getMeasurements(stationCode: string): Promise<any> {\n    //url_Measurements: 'https://umweltbundesamt.api.proxy.bund.dev/api/air_data/v3/airquality/json?date_from=2024-09-11&time_from=14&date_to=2024-09-11&time_to=14&station=DENW430&lang=de'\n    const urlSpec = 'airquality/json?';\n    const urlStation: string = prepareQueryParameters(stationCode);\n    const url = [baseUrl, urlSpec, urlStation].join('');\n    let _measurements: any = {};\n    return fetch(url, {\n        method: 'GET',\n        headers: {\n            accept: 'application/json',\n            'Content-Type': 'application/json',\n            'User-Agent':\n                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36',\n        },\n    }).then(async response => {\n        if (!response.ok) {\n            throw new Error('[getMeasurements] failed to retrieve data');\n        }\n        const data: any = await response.json();\n        _measurements = data.data;\n        return _measurements;\n    });\n}\n\n/**\n *\n * @param stationCode alphanumeric Code\n * @param component numeric Value\n * @returns Measurements\n */\nexport async function getMeasurementsComp(stationCode: string, component: number): Promise<any> {\n    //https://www.umweltbundesamt.de/api/air_data/v3/measures/json?date_from=2024-11-29&date_to=2024-11-29&time_from=7&time_to=8&station=DEHE018&component=2\n    const urlSpec = 'measures/json?';\n    const urlStation: string = prepareQueryParameters(stationCode);\n    const url = [baseUrl, urlSpec, urlStation, '&component=', component].join('');\n    let _measurements: any = {};\n    return fetch(url, {\n        method: 'GET',\n        headers: {\n            accept: 'application/json',\n            'Content-Type': 'application/json',\n            'User-Agent':\n                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36',\n        },\n    }).then(async response => {\n        if (!response.ok) {\n            throw new Error('[getMeasurements] failed to retrieve data');\n        }\n        const data: any = await response.json();\n        _measurements = data.data;\n        return _measurements;\n    });\n}\n\n/**\n *\n * @param stationCode alphanumeric Code\n * @returns preparedQuery\n */\nfunction prepareQueryParameters(stationCode: string): string {\n    const parameters = [];\n    const workDate = getDateUTC();\n    const _hour = workDate.getHours();\n    const _hourFrom = _hour < 1 ? 24 : _hour;\n    //const _hourFrom1 = _hourFrom - 1;\n    //const _hourTo = _hourFrom + 1;\n    //\n    const dateFrom = `date_from=${formatDate(workDate)}`;\n    parameters.push(dateFrom);\n    //\n    const timeFrom = `time_from=${String(_hourFrom)}`;\n    parameters.push(timeFrom);\n    //\n    const dateTo = `date_to=${formatDate(workDate)}`;\n    parameters.push(dateTo);\n    //\n    const timeTo = `time_to=${String(_hourFrom)}`; //_hourTo\n    parameters.push(timeTo);\n    //\n    if (stationCode != '') {\n        parameters.push(`station=${stationCode}`);\n        parameters.push('lang=de');\n    }\n    //\n    const preparedQueryParameter: string = parameters.join('&');\n    //console.log(`Parameter: ${preparedQueryParameter}`);\n\n    return preparedQueryParameter;\n}\n\nfunction getDateUTC(): Date {\n    const d = new Date();\n    return new Date(\n        d.getUTCFullYear(),\n        d.getUTCMonth(),\n        d.getUTCDate(),\n        d.getUTCHours(),\n        d.getUTCMinutes(),\n        d.getUTCSeconds(),\n    );\n}\n\nfunction formatDate(d: Date): string {\n    const year = d.getFullYear();\n    const month = (d.getMonth() + 1).toString().padStart(2, '0');\n    const day = d.getDate().toString().padStart(2, '0');\n    return `${year}-${month}-${day}`;\n}\n"],
  "mappings": "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",
  "names": []
}
