{
  "version": 3,
  "sources": ["../../src/lib/helper_time.ts"],
  "sourcesContent": ["//__________________________\n// Get actual date as UTC-Date\nexport function getDateUTC(): Date {\n\tconst d = new Date();\n\treturn new Date(\n\t\td.getUTCFullYear(),\n\t\td.getUTCMonth(),\n\t\td.getUTCDate(),\n\t\td.getUTCHours(),\n\t\td.getUTCMinutes(),\n\t\td.getUTCSeconds(),\n\t);\n}\n//\n//__________________________\n// Build new Data with given hour\nexport function buildDate(h: number): Date {\n\tconst d = new Date();\n\tconsole.log(d);\n\treturn new Date(d.getFullYear(), d.getMonth(), d.getDate(), h, d.getMinutes(), d.getSeconds());\n}\n//__________________________\n// Format totalMinutes to 'xh ym'\nexport const toHoursAndMinutes = (totalMinutes: number): string => {\n\tconst hours = Math.floor(totalMinutes / 60);\n\tconst minutes = totalMinutes % 60;\n\treturn `${hours}h ${('00' + minutes).slice(-2)}m`;\n};\n//\n//__________________________\n// Format date (for US)\n\nexport function formatDate(d: Date): string {\n\tconst year = d.getFullYear();\n\tconst month = (d.getMonth() + 1).toString().padStart(2, '0');\n\tconst day = d.getDate().toString().padStart(2, '0');\n\treturn `${year}-${month}-${day}`;\n}\n//__________________________\n// Format date for logfiles\nexport function logDate4File(): string {\n\tconst d = new Date();\n\tconst year = d.getFullYear();\n\tconst month = (d.getMonth() + 1).toString().padStart(2, '0');\n\tconst day = d.getDate().toString().padStart(2, '0');\n\treturn `${year}${month}${day}`;\n}\n//\n//\n//__________________________\n// Format date/time for logging\nexport function logDate(): string {\n\tconst now = new Date();\n\treturn now.toLocaleString('fr-CH'); // best format for log-entrys\n}\n//\n//__________________________\n// Hour formatted (with leading 0)\nexport function formatHour(d: Date): string {\n\tconst hour = d.getHours().toString().padStart(2, '0');\n\tconsole.log(`(f) formatHour ${hour}`);\n\treturn hour;\n}\n//\n//__________________________\n// converts string to Date\nexport function convertStringToDate(stringFromApi: string): Date {\n\t//console.log(`[convertStringToDate] ${stringFromApi}`);\n\tconst newDate: Date = new Date(stringFromApi);\n\treturn newDate;\n}\n//\n//__________________________\n// corrects the hours of a date by a +/- offset\nexport function correctHours(d: Date, offset: number): Date {\n\td.setHours(d.getHours() - offset);\n\treturn d;\n}\n//\n//__________________________\n// substract two hours from actual time\nexport function subtractTwoHours(): Date {\n\tconst currentDate = new Date();\n\tcurrentDate.setHours(currentDate.getHours() - 2);\n\treturn currentDate;\n}\n//\n//__________________________\n// extract hours from datestring\nexport function extraktHour(s: string): string {\n\t//var dateString = \"2024-05-05 10:00:00\";\n\tconst timeString = s.split(' ')[1];\n\tconst hour = timeString.split(':')[0];\n\treturn hour;\n}\n//\n//__________________________\n// correct datestring from datestring by adding 1 hour\nexport function correctHour(s: string, offset: number): string {\n\t//var dateString = \"2024-05-05 10:00:00\";\n\tconst dateString = s.split(' ')[0].split('-');\n\tconst sDate = dateString[2] + '.' + dateString[1] + '.' + dateString[0];\n\t//\n\tconst timeString = s.split(' ')[1].split(':');\n\tconst hour = parseInt(timeString[0]) + offset; //Korrektur\n\tconst sHour = hour.toString().padStart(2, '0');\n\tconst sTime = sHour + ':' + timeString[1] + ' Uhr';\n\treturn `${sDate} ${sTime}`;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEO,SAAS,aAAmB;AAClC,QAAM,IAAI,oBAAI,KAAK;AACnB,SAAO,IAAI;AAAA,IACV,EAAE,eAAe;AAAA,IACjB,EAAE,YAAY;AAAA,IACd,EAAE,WAAW;AAAA,IACb,EAAE,YAAY;AAAA,IACd,EAAE,cAAc;AAAA,IAChB,EAAE,cAAc;AAAA,EACjB;AACD;AAIO,SAAS,UAAU,GAAiB;AAC1C,QAAM,IAAI,oBAAI,KAAK;AACnB,UAAQ,IAAI,CAAC;AACb,SAAO,IAAI,KAAK,EAAE,YAAY,GAAG,EAAE,SAAS,GAAG,EAAE,QAAQ,GAAG,GAAG,EAAE,WAAW,GAAG,EAAE,WAAW,CAAC;AAC9F;AAGO,MAAM,oBAAoB,CAAC,iBAAiC;AAClE,QAAM,QAAQ,KAAK,MAAM,eAAe,EAAE;AAC1C,QAAM,UAAU,eAAe;AAC/B,SAAO,GAAG,KAAK,MAAM,OAAO,SAAS,MAAM,EAAE,CAAC;AAC/C;AAKO,SAAS,WAAW,GAAiB;AAC3C,QAAM,OAAO,EAAE,YAAY;AAC3B,QAAM,SAAS,EAAE,SAAS,IAAI,GAAG,SAAS,EAAE,SAAS,GAAG,GAAG;AAC3D,QAAM,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,GAAG,GAAG;AAClD,SAAO,GAAG,IAAI,IAAI,KAAK,IAAI,GAAG;AAC/B;AAGO,SAAS,eAAuB;AACtC,QAAM,IAAI,oBAAI,KAAK;AACnB,QAAM,OAAO,EAAE,YAAY;AAC3B,QAAM,SAAS,EAAE,SAAS,IAAI,GAAG,SAAS,EAAE,SAAS,GAAG,GAAG;AAC3D,QAAM,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,GAAG,GAAG;AAClD,SAAO,GAAG,IAAI,GAAG,KAAK,GAAG,GAAG;AAC7B;AAKO,SAAS,UAAkB;AACjC,QAAM,MAAM,oBAAI,KAAK;AACrB,SAAO,IAAI,eAAe,OAAO;AAClC;AAIO,SAAS,WAAW,GAAiB;AAC3C,QAAM,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,GAAG,GAAG;AACpD,UAAQ,IAAI,kBAAkB,IAAI,EAAE;AACpC,SAAO;AACR;AAIO,SAAS,oBAAoB,eAA6B;AAEhE,QAAM,UAAgB,IAAI,KAAK,aAAa;AAC5C,SAAO;AACR;AAIO,SAAS,aAAa,GAAS,QAAsB;AAC3D,IAAE,SAAS,EAAE,SAAS,IAAI,MAAM;AAChC,SAAO;AACR;AAIO,SAAS,mBAAyB;AACxC,QAAM,cAAc,oBAAI,KAAK;AAC7B,cAAY,SAAS,YAAY,SAAS,IAAI,CAAC;AAC/C,SAAO;AACR;AAIO,SAAS,YAAY,GAAmB;AAE9C,QAAM,aAAa,EAAE,MAAM,GAAG,EAAE,CAAC;AACjC,QAAM,OAAO,WAAW,MAAM,GAAG,EAAE,CAAC;AACpC,SAAO;AACR;AAIO,SAAS,YAAY,GAAW,QAAwB;AAE9D,QAAM,aAAa,EAAE,MAAM,GAAG,EAAE,CAAC,EAAE,MAAM,GAAG;AAC5C,QAAM,QAAQ,WAAW,CAAC,IAAI,MAAM,WAAW,CAAC,IAAI,MAAM,WAAW,CAAC;AAEtE,QAAM,aAAa,EAAE,MAAM,GAAG,EAAE,CAAC,EAAE,MAAM,GAAG;AAC5C,QAAM,OAAO,SAAS,WAAW,CAAC,CAAC,IAAI;AACvC,QAAM,QAAQ,KAAK,SAAS,EAAE,SAAS,GAAG,GAAG;AAC7C,QAAM,QAAQ,QAAQ,MAAM,WAAW,CAAC,IAAI;AAC5C,SAAO,GAAG,KAAK,IAAI,KAAK;AACzB;",
  "names": []
}
